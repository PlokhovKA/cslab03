 								
								Лабораторная работа №3
								 Плохов Кирилл А-2-18
1) Главный код программы. Функция main 

#include <iostream>
#include <vector>
#include "histogram.h"
#include "svg.h"
using namespace std;

vector<double>
input_numbers(size_t count)
{
    vector<double> result(count);
    for (size_t i = 0; i < count; i++)
    {
        cin >> result[i];
    }
    return result;
}






int main()
{
// Ввод данных
    size_t number_count;
    cin >> number_count;
    vector<double> numbers = input_numbers(number_count);

    size_t bin_count;
    cerr << "Enter column count: ";
    cin >> bin_count;

// Обработка данных
    double min, max;
    find_minmax(numbers, min, max);

    vector<size_t> bins = make_histogram(numbers, bin_count, min, max);

// Вывод данных
    show_histogram_svg(bins);

    return 0;
}

   								код histogram.cpp 
						(функция поиска максимума и минимума с проверкой на пустой вектор)
#include <iostream>
#include <vector>
#include "histogram.h"
#include "svg.h"
using namespace std;

vector<double>
input_numbers(size_t count)
{
    vector<double> result(count);
    for (size_t i = 0; i < count; i++)
    {
        cin >> result[i];
    }
    return result;
}






int main()
{
// Ввод данных
    size_t number_count;
    cin >> number_count;
    vector<double> numbers = input_numbers(number_count);

    size_t bin_count;
    cerr << "Enter column count: ";
    cin >> bin_count;

// Обработка данных
    double min, max;
    find_minmax(numbers, min, max);

    vector<size_t> bins = make_histogram(numbers, bin_count, min, max);

// Вывод данных
    show_histogram_svg(bins);

    return 0;
}

								код histogram.h (вызов функции)
#ifndef HISTOGRAM_H_INCLUDED
#define HISTOGRAM_H_INCLUDED
#include <vector>

using namespace std;

void
find_minmax(vector<double> numbers, double& min, double& max);

vector<size_t>  make_histogram(const vector<double>& numbers, size_t bin_count, double min, double max);

void show_histogram_text(vector<size_t> bins);



#endif // HISTOGRAM_H_INCLUDED

									тесты
#include <iostream>
#include "histogram.h"
#include <cassert>

using namespace std;


void
test_positive() {
    double min = 0;
    double max = 0;
    find_minmax({1, 2, 3}, min, max);
    assert(min == 1);
    assert(max == 3);
}
void
test_positive1() {
    double min = 0;
    double max = 0;
    find_minmax({-1, -2, -3}, min, max);
    assert(min == -3);
    assert(max == -1);
}
void
test_positive2() {
    double min = 0;
    double max = 0;
    find_minmax({1, 1, 1}, min, max);
    assert(min == 1);
    assert(max == 1);
}
void
test_positive3() {
    double min = 0;
    double max = 0;
    find_minmax({1}, min, max);
    assert(min == 1);
    assert(max == 1);
}
void
test_positive4() {
    double min = 0;
    double max = 0;
    find_minmax({}, min, max);
    assert(min == 0);
    assert(max == 0);
}

int
main() {
    test_positive();
    test_positive1();
    test_positive2();
    test_positive3();
    test_positive4();
}

										код для гистограммы
#pragma once
#include <vector>
#include <iostream>
using namespace std;
void
svg_begin(double width, double height);

void
svg_end();


void svg_text(double left, double baseline, string text);

 void svg_rect(double x, double y, double width, double height,string stroke, string color);



void
show_histogram_svg(const vector<size_t>& bins);

										код svg.cpp 
#include "svg.h"
using namespace std;

void
svg_begin(double width, double height)
{
    cout << "<?xml version='1.0' encoding='UTF-8'?>\n";
    cout << "<svg width='" << width << "' height='" << height << "' "
         << "viewBox='0 0 " << width << " " << height << "' "
         << "xmlns='http://www.w3.org/2000/svg'>\n";
}
void
svg_end()
{
    cout << "</svg>\n";

}

void svg_text(double left, double baseline, string text)
{
    cout << "<text x='" << left <<"' y='" << baseline << "' >"<< text << "</text>";
}
 void svg_rect(double x, double y, double width, double height,string stroke = "black", string color = "black")
 {
cout << "<rect x='" << x << "' y='"<< y <<"' width='" << width << "' height='" << height << "' stroke='" << stroke << "' fill='" << color <<"'/>";
}


void
show_histogram_svg(const vector<size_t>& bins)
{
    const auto IMAGE_WIDTH = 500;
    const auto IMAGE_HEIGHT = 300;
    const auto TEXT_LEFT = 20;
    const auto TEXT_BASELINE = 20;
    const auto TEXT_WIDTH = 50;
    const auto BIN_HEIGHT = 30;
    const auto ELEM_WIDTH = 10;
    svg_begin(IMAGE_WIDTH, IMAGE_HEIGHT);
    double top = 0;
    size_t max_count = 0;
    for (size_t count : bins)
    {
        if (count > max_count)
        {
            max_count = count;
        }
    }
    double factor = 1.0;
    if ((max_count*ELEM_WIDTH)>(IMAGE_WIDTH-TEXT_WIDTH))
    {
        factor= static_cast<double>(IMAGE_WIDTH-TEXT_WIDTH)/(max_count*ELEM_WIDTH);
    }
for (size_t bin : bins) {
    const double bin_width = ELEM_WIDTH * bin * factor;
    svg_text(TEXT_LEFT, top + TEXT_BASELINE, to_string(bin));
    svg_rect(TEXT_WIDTH, top, bin_width, BIN_HEIGHT, "black", "yellow");
    top += BIN_HEIGHT;
}
    svg_end();

}


конец	